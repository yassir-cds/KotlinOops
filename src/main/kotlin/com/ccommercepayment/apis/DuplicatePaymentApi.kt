/**
* Payment Gateway
* No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
*
* The version of the OpenAPI document: 1.0.0-oas3
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package com.ccommercepayment.apis

import com.ccommercepayment.models.CardPaymentResponse
import com.ccommercepayment.models.DuplicatePaymentBatchRequest
import com.ccommercepayment.models.DuplicatePaymentRequest

import com.ccommercepayment.infrastructure.ApiClient
import com.ccommercepayment.infrastructure.ClientException
import com.ccommercepayment.infrastructure.ClientError
import com.ccommercepayment.infrastructure.ServerException
import com.ccommercepayment.infrastructure.ServerError
import com.ccommercepayment.infrastructure.MultiValueMap
import com.ccommercepayment.infrastructure.RequestConfig
import com.ccommercepayment.infrastructure.RequestMethod
import com.ccommercepayment.infrastructure.ResponseType
import com.ccommercepayment.infrastructure.Success
import com.ccommercepayment.infrastructure.toMultiValue

class DuplicatePaymentApi(basePath: kotlin.String = "http://localhost") : ApiClient(basePath) {

    /**
    * Duplicate payment batch
    * Achieve a batch of payments by copy of previously processed payments, with the same payment method.
    * @param authToken Gets or sets the authentication token. 
    * @param duplicatePaymentBatchRequest All data needed to make process the payment, with the reference to the previously payment. (optional)
    * @return CardPaymentResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1PaymentsDuplicatePaymentBatchPost(authToken: kotlin.String, duplicatePaymentBatchRequest: DuplicatePaymentBatchRequest?) : CardPaymentResponse {
        val localVariableBody: kotlin.Any? = duplicatePaymentBatchRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/payments/duplicate-payment/batch",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<CardPaymentResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CardPaymentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

    /**
    * Duplicate payment
    * Achieve a payment by copy of a previously processed payment, with the same payment method.
    * @param authToken Gets or sets the authentication token. 
    * @param duplicatePaymentRequest All data needed to make process the payment, with the reference to the previously payment. (optional)
    * @return CardPaymentResponse
    * @throws UnsupportedOperationException If the API returns an informational or redirection response
    * @throws ClientException If the API returns a client error response
    * @throws ServerException If the API returns a server error response
    */
    @Suppress("UNCHECKED_CAST")
    @Throws(UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun v1PaymentsDuplicatePaymentPost(authToken: kotlin.String, duplicatePaymentRequest: DuplicatePaymentRequest?) : CardPaymentResponse {
        val localVariableBody: kotlin.Any? = duplicatePaymentRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("authToken" to authToken.toString())
        val localVariableConfig = RequestConfig(
            RequestMethod.POST,
            "/v1/payments/duplicate-payment",
            query = localVariableQuery,
            headers = localVariableHeaders
        )
        val localVarResponse = request<CardPaymentResponse>(
            localVariableConfig,
            localVariableBody
        )

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as CardPaymentResponse
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> throw ClientException((localVarResponse as ClientError<*>).body as? String ?: "Client error")
            ResponseType.ServerError -> throw ServerException((localVarResponse as ServerError<*>).message ?: "Server error")
        }
    }

}
